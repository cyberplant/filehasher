name: Publish to PyPI

on:
  push:
    branches: [ main, master, improvements ]
  pull_request:
    branches: [ main, master, improvements ]
  release:
    types: [ published ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ "3.8", "3.9", "3.10", "3.11", "3.12" ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build pytest

      - name: Install package in development mode
        run: |
          pip install -e .

      - name: Test basic functionality
        run: |
          # Test help command
          python -m filehasher --help
          filehasher --help

          # Test basic commands
          mkdir -p test_dir
          echo "test content" > test_dir/test.txt
          cd test_dir
          filehasher --generate --quiet
          ls -la .hashes
          filehasher --benchmark --quiet
          cd ..

      - name: Test parallel processing
        run: |
          cd test_dir
          filehasher --generate --parallel --workers 2 --quiet
          filehasher --generate --parallel --verbose --algorithm sha256 --quiet
          cd ..

      - name: Test different algorithms
        run: |
          cd test_dir
          for algo in md5 sha1 sha256 sha512 blake2b blake2s; do
            echo "Testing $algo..."
            filehasher --generate --algorithm $algo --quiet
          done
          cd ..

  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release' || github.event_name == 'push'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  publish:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    environment:
      name: pypi
      url: https://pypi.org/p/filehasher

    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
      - name: Download build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-test:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/improvements')

    environment:
      name: testpypi
      url: https://test.pypi.org/p/filehasher

    permissions:
      id-token: write

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

      - name: Publish package distributions to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
